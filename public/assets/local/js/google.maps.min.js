/**
 * Google Map Module
 * This module will initialize map from the given parameter
 *
 * @author			Aby Dahana
 * @profile			abydahana.github.io
 */
 
"use strict";

/**
 * Set default map center and zoom
 * This variable also used to format the map dynamically
 */
var _this,
	leave_page,
	map,
	bounds,
	lngLat,
	draggable_marker,
	colorscheme,
	geocoder,
	geolocation,
	sourceVector,
	layerVector,
	apply_to,
	apply_address,
	apply_measure,
	drawingManager,
	geojson,
	loaded_markers							= [],
	loaded_polygons							= [],
	loaded_linestrings						= [],
	features								= [],
	polygons								= [],
	linestrings								= [],
	markers									= [],
	popup									= [];

var openlayers								= (function()
{
	return {
		/**
		 * render the map
		 */
		render: function(_this_)
		{
			this.reset();
			
			/* keep the "this" context */
			_this							= _this_,
			apply_to						= _this.attr('data-apply-coordinate-to'),
			apply_address					= _this.attr('data-apply-address-to'),
			apply_measure					= _this.attr('data-apply-measurement-to'),
			leave_page						= false;
			
			/* set the coordinate from data-coordinate attribute*/
			lngLat							= (_this.attr('data-coordinate') ? JSON.parse(_this.attr('data-coordinate')) : '');
			
			if(!lngLat)
			{
				lngLat						= config.map_center;
			}
			
			colorscheme						= (typeof lngLat.colorscheme !== 'undefined' ? lngLat.colorscheme : ''),
			lngLat							= new google.maps.LatLng(lngLat.lat, lngLat.lng),
			bounds							= new google.maps.LatLngBounds(),
			popup							= new google.maps.InfoWindow({width: 240});
			
			if(!_this.attr('id'))
			{
				_this.attr('id', 'maps')
			}
			
			map								= new google.maps.Map
			(
				document.getElementById(_this.attr('id')),
				{
					zoom: (_this.attr('data-zoom') ? parseInt(_this.attr('data-zoom')) : 14),
					center: lngLat,
					fullscreenControl: false,
					gestureHandling: 'cooperative',
					mapTypeId: google.maps.MapTypeId.ROADMAP,
					mapTypeControlOptions:
					{
						style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR,
						position: google.maps.ControlPosition.BOTTOM_CENTER
					},
					styles: [
					{
						featureType: 'poi',
						stylers:
						[
							{
								visibility: 'off'
							}
						]   
					}]
				}
			),
			
			(1 == _this.attr('data-geocoder') ? this.geocoder() : ''),
			
			(1 == _this.attr('data-geolocation') ? this.geolocation() : ''),
			
			google.maps.event.addListener(map, 'click', function(event)
			{
				if(popup)
				{
					popup.close(map, markers)
				}
			});
			
			/* load drawing manager */
			if(1 == _this.attr('data-drawing-manager'))
			{
				this.drawingManager()
			}
			else if(_this.attr('data-polygon') || _this.attr('data-linestring'))
			{
			}
			
			/* load marker */
			else
			{
				this.marker(null, null, null, null, _this.attr('data-draggable'))
			}
			
			/* load data from json file */
			if(_this.attr('data-url'))
			{
				/* serialize and build data */
				this.loadJson(_this.attr('data-url'), this)
			}
			else
			{
				/* build polygon from predefined data */
				(_this.attr('data-polygon') ? this.polygon(JSON.parse(_this.attr('data-polygon')), true) : ''),
				
				/* build linestring from predefined data */
				(_this.attr('data-linestring') ? this.linestring(JSON.parse(_this.attr('data-linestring')), true) : ''),
				
				/* build marker from predefined data */
				(_this.attr('data-marker') ? this.marker(JSON.parse(_this.attr('data-marker')), true) : '')
			}
		},
		
		reset: function()
		{
			if(markers)
			{
				$.each(markers, function(key, val)
				{
					if(drawingManager)
					{
						val.setMap(null)
					}
					else
					{
						if(val.getVisible())
						{
							val.setVisible(false)
						}
						else
						{
							val.setVisible(false)
						}
					}
				})
			}
			
			if(polygons)
			{
				$.each(polygons, function(key, val)
				{
					if(drawingManager)
					{
						val.setMap(null)
					}
					else
					{
						if(val.getVisible())
						{
							val.setVisible(false)
						}
						else
						{
							val.setVisible(false)
						}
					}
				})
			}
			
			if(linestrings)
			{
				$.each(linestrings, function(key, val)
				{
					if(drawingManager)
					{
						val.setMap(null)
					}
					else
					{
						if(val.getVisible())
						{
							val.setVisible(false)
						}
						else
						{
							val.setVisible(false)
						}
					}
				})
			}
			
			loaded_markers					= [],
			loaded_polygons					= [],
			loaded_linestrings				= [],
			features						= [],
			polygons						= [],
			linestrings						= [],
			markers							= [],
			bounds							= new google.maps.LatLngBounds();
		},
		
		loadJson: function(url, _this, boundTo)
		{
			/* load the data from URL (json file */
			$.ajax
			({
				url: url,
				method: 'POST',
				dataType: 'JSON',
				contentType: false,
				processData: false
			})
			.done(function(response)
			{
				if(response)
				{
					/* serialize and build data */
					$.each(response, function(key, val)
					{
						if(typeof val.features !== 'undefined' && typeof val.features[0] !== 'undefined' && val.features[0].geometry !== 'undefined' && val.features[0].geometry.type !== 'undefined' && (val.features[0].geometry.type.toLowerCase() == 'polygon' || val.features[0].geometry.type.toLowerCase() == 'multipolygon'))
						{
							_this.polygon(val, (!key ? true : false), key, 'polygon')
						}
						else if(typeof val.features !== 'undefined' && typeof val.features[0] !== 'undefined' && val.features[0].geometry !== 'undefined' && val.features[0].geometry.type !== 'undefined' && (val.features[0].geometry.type.toLowerCase() == 'linestring' || val.features[0].geometry.type.toLowerCase() == 'multilinestring'))
						{
							_this.linestring(val, (!key ? true : false), key, 'polygon')
						}
						else if(typeof val.features !== 'undefined' && typeof val.features[0] !== 'undefined' && val.features[0].geometry !== 'undefined' && val.features[0].geometry.coordinate !== 'undefined')
						{
							_this.marker(val, (!key ? true : false), key, 'polygon')
						}
					})
				}
			})
		},
		
		drawingManager: function()
		{
			/* Set drawing manager shape options */
			var coordinates					= [];
			
			/* Set drawing manager */
			drawingManager					= new google.maps.drawing.DrawingManager
			({
				/* Option available is CIRCLE, MARKER, POLYGON, POLYLINE, RECTANGLE */
				drawingMode: ('polygon' == _this.attr('data-drawing-type') ? google.maps.drawing.OverlayType.POLYGON : google.maps.drawing.OverlayType.POLYLINE),
				polygonOptions:
				{
					id: (features.length + 1),
					group: _this.attr('data-drawing-type') + '_1',
					strokeColor: (_this.closest('.drawing-placeholder').find('.colorscheme').val() ? _this.closest('.drawing-placeholder').find('.colorscheme').val() : '#FF0000'),
					fillColor: (_this.closest('.drawing-placeholder').find('.colorscheme').val() ? _this.closest('.drawing-placeholder').find('.colorscheme').val() : '#FF0000'),
					strokeOpacity: 0.8,
					strokeWeight: 2,
					fillOpacity: 0.35,
					editable: true,
					draggable: true
				},
				polylineOptions:
				{
					id: (features.length + 1),
					group: _this.attr('data-drawing-type') + '_1',
					strokeColor: (_this.closest('.drawing-placeholder').find('.colorscheme').val() ? _this.closest('.drawing-placeholder').find('.colorscheme').val() : '#FF0000'),
					strokeOpacity: 0.8,
					strokeWeight: 6,
					editable: true,
					draggable: true
				},
				map: map,
				drawingControl: true,
				drawingControlOptions:
				{
					position: google.maps.ControlPosition.TOP_RIGHT,
					drawingModes: [('polygon' == _this.attr('data-drawing-type') ? 'polygon' : 'polyline')]
				}
			});
			
			google.maps.event.addListener(drawingManager, 'overlaycomplete', function(e)
			{
				if(e.type == google.maps.drawing.OverlayType.POLYGON)
				{
					var dataLayer			= new google.maps.Data();
					
					polygons.push(e.overlay),
					
					dataLayer.add(new google.maps.Data.Feature
					({
						geometry: new google.maps.Data.Polygon([e.overlay.getPath().getArray()])
					})),
					
					/* Push converted JSON into input placeholder */
					dataLayer.toGeoJson(function(obj)
					{
						features.push(obj.features[0]);
						
						/* Returning the result of geometry coordinates */
						$(apply_to).val
						(
							JSON.stringify
							({
								colorscheme: e.overlay.fillColor,
								features: features,
								measure: google.maps.geometry.spherical.computeArea(e.overlay.getPath())
							})
						),
						$(apply_measure).val(google.maps.geometry.spherical.computeArea(e.overlay.getPath()))
					}),
					
					google.maps.event.addListener(e.overlay, 'click', function()
					{
						/* open infoWindow */
						console.log('clicked')
					}),
					
					google.maps.event.addListener(e.overlay, 'rightclick', function()
					{
						/* remove data from serialized */
						features.splice(e.overlay, 1);
						
						var dataLayer		= new google.maps.Data();
						
						dataLayer.add(new google.maps.Data.Feature
						({
							geometry: new google.maps.Data.LineString(e.overlay.getPath().getArray())
						})),
						
						/* Push converted JSON into input placeholder */
						dataLayer.toGeoJson(function(obj)
						{
							/* Returning the result of geometry coordinates */
							$(apply_to).val
							(
								JSON.stringify
								({
									colorscheme: e.overlay.fillColor,
									features: features,
									measure: google.maps.geometry.spherical.computeArea(e.overlay.getPath())
								})
							),
							$(apply_measure).val(google.maps.geometry.spherical.computeArea(e.overlay.getPath()))
						}),
						
						/* remove data from map */
						e.overlay.setMap(null)
					}),
					
					/* get event to modify serialized data */
					e.overlay.getPaths().forEach(function(path, index)
					{
						/* point created */
						google.maps.event.addListener(path, 'insert_at', function()
						{
							var dataLayer	= new google.maps.Data();
							
							dataLayer.add(new google.maps.Data.Feature
							({
								geometry: new google.maps.Data.Polygon([path.getArray()])
							})),
							
							/* Push converted JSON into input placeholder */
							dataLayer.toGeoJson(function(obj)
							{
								features[path.id]	= obj.features[0];
								
								/* Returning the result of geometry coordinates */
								$(apply_to).val
								(
									JSON.stringify
									({
										colorscheme: e.overlay.fillColor,
										features: features,
										measure: google.maps.geometry.spherical.computeArea(e.overlay.getPath())
									})
								),
								$(apply_measure).val(google.maps.geometry.spherical.computeArea(e.overlay.getPath()))
							})
						}),
						
						/* point removed */
						google.maps.event.addListener(path, 'remove_at', function()
						{
							var dataLayer	= new google.maps.Data();
							
							dataLayer.add(new google.maps.Data.Feature
							({
								geometry: new google.maps.Data.Polygon([path.getArray()])
							})),
							
							/* Push converted JSON into input placeholder */
							dataLayer.toGeoJson(function(obj)
							{
								features[path.id]	= obj.features[0];
								
								/* Returning the result of geometry coordinates */
								$(apply_to).val
								(
									JSON.stringify
									({
										colorscheme: e.overlay.fillColor,
										features: features,
										measure: google.maps.geometry.spherical.computeArea(e.overlay.getPath())
									})
								),
								$(apply_measure).val(google.maps.geometry.spherical.computeArea(e.overlay.getPath()))
							})
						}),
						
						/* point moved */
						google.maps.event.addListener(path, 'set_at', function()
						{
							var dataLayer	= new google.maps.Data();
							
							dataLayer.add(new google.maps.Data.Feature
							({
								geometry: new google.maps.Data.Polygon([path.getArray()])
							})),
							
							/* Push converted JSON into input placeholder */
							dataLayer.toGeoJson(function(obj)
							{
								features[path.id]	= obj.features[0];
								
								/* Returning the result of geometry coordinates */
								$(apply_to).val
								(
									JSON.stringify
									({
										colorscheme: e.overlay.fillColor,
										features: features,
										measure: google.maps.geometry.spherical.computeArea(e.overlay.getPath())
									})
								),
								$(apply_measure).val(google.maps.geometry.spherical.computeArea(e.overlay.getPath()))
							})
						}),
						
						/* shape dragged */
						google.maps.event.addListener(e.overlay, 'dragend', function()
						{
							var dataLayer	= new google.maps.Data();
							
							dataLayer.add(new google.maps.Data.Feature
							({
								geometry: new google.maps.Data.LineString(e.overlay.getPath().getArray())
							})),
							
							/* Push converted JSON into input placeholder */
							dataLayer.toGeoJson(function(obj)
							{
								features[e.overlay.id] = obj.features[0];
								/* Returning the result of geometry coordinates */
								$(apply_to).val
								(
									JSON.stringify
									({
										colorscheme: e.overlay.fillColor,
										features: features,
										measure: google.maps.geometry.spherical.computeArea(e.overlay.getPath())
									})
								),
								$(apply_measure).val(google.maps.geometry.spherical.computeArea(e.overlay.getPath()))
							})
						})
					})
				}
				else if(e.type == google.maps.drawing.OverlayType.POLYLINE)
				{
					var dataLayer			= new google.maps.Data();
					
					linestrings.push(e.overlay),
					
					dataLayer.add(new google.maps.Data.Feature
					({
						geometry: new google.maps.Data.LineString(e.overlay.getPath().getArray())
					})),
					
					/* Push converted JSON into input placeholder */
					dataLayer.toGeoJson(function(obj)
					{
						features.push(obj.features[0]);
						
						/* Returning the result of geometry coordinates */
						$(apply_to).val
						(
							JSON.stringify
							({
								colorscheme: e.overlay.strokeColor,
								features: features,
								measure: google.maps.geometry.spherical.computeLength(e.overlay.getPath())
							})
						),
						$(apply_measure).val(google.maps.geometry.spherical.computeLength(e.overlay.getPath()))
					}),
						
					google.maps.event.addListener(e.overlay, 'click', function()
					{
						/* open infoWindow */
						console.log('clicked')
					}),
					
					google.maps.event.addListener(e.overlay, 'rightclick', function()
					{
						/* remove data from serialized */
						features.splice(e.overlay, 1);
						
						var dataLayer		= new google.maps.Data();
						
						dataLayer.add(new google.maps.Data.Feature
						({
							geometry: new google.maps.Data.LineString(e.overlay.getPath().getArray())
						})),
						
						/* Push converted JSON into input placeholder */
						dataLayer.toGeoJson(function(obj)
						{
							/* Returning the result of geometry coordinates */
							$(apply_to).val
							(
								JSON.stringify
								({
									colorscheme: e.overlay.strokeColor,
									features: features,
									measure: google.maps.geometry.spherical.computeLength(e.overlay.getPath())
								})
							),
							$(apply_measure).val(google.maps.geometry.spherical.computeLength(e.overlay.getPath()))
						}),
						
						/* remove data from map */
						e.overlay.setMap(null)
					}),
					
					/* point created */
					google.maps.event.addListener(e.overlay, 'insert_at', function()
					{
						var dataLayer		= new google.maps.Data();
						
						dataLayer.add(new google.maps.Data.Feature
						({
							geometry: new google.maps.Data.LineString(e.overlay.getPath().getArray())
						})),
						
						/* Push converted JSON into input placeholder */
						dataLayer.toGeoJson(function(obj)
						{
							features[e.overlay.id]	= obj.features[0];
							
							/* Returning the result of geometry coordinates */
							$(apply_to).val
							(
								JSON.stringify
								({
									colorscheme: e.overlay.strokeColor,
									features: features,
									measure: google.maps.geometry.spherical.computeLength(e.overlay.getPath())
								})
							),
							$(apply_measure).val(google.maps.geometry.spherical.computeLength(e.overlay.getPath()))
						})
					}),
					
					/* point removed */
					google.maps.event.addListener(e.overlay.getPath(), 'remove_at', function()
					{
						var dataLayer		= new google.maps.Data();
						
						dataLayer.add(new google.maps.Data.Feature
						({
							geometry: new google.maps.Data.LineString(e.overlay.getPath().getArray())
						})),
						
						/* Push converted JSON into input placeholder */
						dataLayer.toGeoJson(function(obj)
						{
							features[e.overlay.id]	= obj.features[0];
							
							/* Returning the result of geometry coordinates */
							$(apply_to).val
							(
								JSON.stringify
								({
									colorscheme: e.overlay.strokeColor,
									features: features,
									measure: google.maps.geometry.spherical.computeLength(e.overlay.getPath())
								})
							),
							$(apply_measure).val(google.maps.geometry.spherical.computeLength(e.overlay.getPath()))
						})
					}),
					
					/* point moved */
					google.maps.event.addListener(e.overlay.getPath(), 'set_at', function()
					{
						var dataLayer		= new google.maps.Data();
						
						dataLayer.add(new google.maps.Data.Feature
						({
							geometry: new google.maps.Data.LineString(e.overlay.getPath().getArray())
						})),
						
						/* Push converted JSON into input placeholder */
						dataLayer.toGeoJson(function(obj)
						{
							features[e.overlay.id]	= obj.features[0];
							
							/* Returning the result of geometry coordinates */
							$(apply_to).val
							(
								JSON.stringify
								({
									colorscheme: e.overlay.strokeColor,
									features: features,
									measure: google.maps.geometry.spherical.computeLength(e.overlay.getPath())
								})
							),
							$(apply_measure).val(google.maps.geometry.spherical.computeLength(e.overlay.getPath()))
						})
					}),
					
					/* point moved */
					google.maps.event.addListener(e.overlay.getPath(), 'dragend', function()
					{
						var dataLayer		= new google.maps.Data();
						
						dataLayer.add(new google.maps.Data.Feature
						({
							geometry: new google.maps.Data.LineString(e.overlay.getPath().getArray())
						})),
						
						/* Push converted JSON into input placeholder */
						dataLayer.toGeoJson(function(obj)
						{
							features[e.overlay.id]	= obj.features[0];
							
							/* Returning the result of geometry coordinates */
							$(apply_to).val
							(
								JSON.stringify
								({
									colorscheme: e.overlay.strokeColor,
									features: features,
									measure: google.maps.geometry.spherical.computeLength(e.overlay.getPath())
								})
							),
							$(apply_measure).val(google.maps.geometry.spherical.computeLength(e.overlay.getPath()))
						})
					})
				}
			})
		},
		
		marker: function(shapes, boundTo, indexID, groupID, draggable)
		{
			/* Draw linestring from array coordinate */
			if(shapes && typeof shapes.coordinate !== 'undefined')
			{
				if(loaded_markers && $.inArray(indexID, loaded_markers) === -1)
				{
					markers.push(new google.maps.Marker
					({
						map: map,
						position: shapes.coordinate,
						title: (typeof shapes.title !== 'undefined' ? shapes.title : ''),
						description: (typeof shapes.description !== 'undefined' ? shapes.description : ''),
						icon:
						{
							url: (shapes.icon ? shapes.icon : (typeof shapes.coordinate.colorscheme !== 'undefined' ? '//chart.apis.google.com/chart?chst=d_map_pin_letter&chld=•|' + shapes.coordinate.colorscheme.replace('#', '') : config.asset_url + 'openlayers/resources/icons/marker.png')),
							scaledSize: (typeof shapes.coordinate.colorscheme !== 'undefined' ? new google.maps.Size(28, 43) : new google.maps.Size(32, 32)),
							origin: new google.maps.Point(0, 0),
							anchor: new google.maps.Point(0, 0)
						},
						id: (indexID + 1),
						group: 'marker_' + groupID
					})),
					bounds.extend(shapes.coordinate),
					loaded_markers.push(indexID)
				}
			}
			else if(shapes && typeof shapes === 'object')
			{
				$.each(shapes, function(key, val)
				{
					if(typeof val.coordinate !== 'undefined' && $.inArray(indexID, loaded_markers) === -1)
					{
						markers.push(new google.maps.Marker
						({
							map: map,
							position: val.coordinate,
							title: (typeof val.title !== 'undefined' ? val.title : ''),
							description: (typeof val.description !== 'undefined' ? val.description : ''),
							icon:
							{
								url: (val.icon ? val.icon : (typeof val.coordinate.colorscheme !== 'undefined' ? '//chart.apis.google.com/chart?chst=d_map_pin_letter&chld=•|' + al.coordinate.colorscheme.replace('#', '') : config.asset_url + 'openlayers/resources/icons/marker.png')),
								scaledSize: (typeof val.coordinate.colorscheme !== 'undefined' ? new google.maps.Size(28, 43) : new google.maps.Size(32, 32)),
								origin: new google.maps.Point(0, 0),
								anchor: new google.maps.Point(0, 0)
							},
							id: indexID,
							group: 'marker_' + groupID
						})),
						bounds.extend(val.coordinate),
						loaded_markers.push(groupID)
					}
				})
			}
			
			$.each(markers, function(key, val)
			{
				google.maps.event.addListener(val, 'click', (function(val, popup)
				{
					return function()
					{
						popup.setContent('<div class="card border-0"><div class="card-body p-3"><h6 class="card-title mb-0">' + val.title + '</h6>' + val.description + '</div></div>'),
						popup.open(map, val),
						openlayers.slideshow('.owl-carousel')
					}
				}) (val, popup)),
				
				/* bound map to fit all shape data in first insert */
				(boundTo && markers.length > 0 ? map.fitBounds(bounds) : null)
			});
			
			/* build draggable marker */
			draggable_marker				= new google.maps.Marker
			({
				map: map,
				position: lngLat,
				title: phrase.default_marker,
				draggable: (1 == draggable ? true : false)
			});
			
			if(colorscheme)
			{
				draggable_marker.setIcon
				({
					url: '//chart.apis.google.com/chart?chst=d_map_pin_letter&chld=•|' + colorscheme.replace('#', ''),
					scaledSize: new google.maps.Size(28, 43)
				})
			}
			
			/* marker clicked event */
			google.maps.event.addListener
			(
				draggable_marker,
				'click',
				(function(draggable_marker, popup)
				{ 
					return function()
					{
						popup.setContent('<p class="p-3 mb-0">' + phrase.this_can_be_drag_on_edit_mode + '</p>'),
						popup.open(map, draggable_marker)
					}
				}) (draggable_marker, popup)
			),
			
			/* marker dragged event */
			google.maps.event.addListener(draggable_marker, 'dragend', function (event)
			{
				var position				= this.position,
					geocoder				= new google.maps.Geocoder(),
					myAddress				= null,
					lngLat					= JSON.stringify(position),
					pos						= $.parseJSON(lngLat);
					
				geocoder.geocode
				({
					'latLng': position
				},
				
				function(response, status)
				{
					var address_detail		= '';
					
					if(status === google.maps.GeocoderStatus.OK)
					{
						var street_number	= '',
							route			= '',
							area_level_4	= '',
							area_level_3	= '';
						
						$.each(response[0].address_components, function(key, val)
						{
							if($.inArray('street_number', val.types) !== -1)
							{
								street_number	= 'No. ' + val.long_name;
								$('.map-street-number').val(val.long_name).trigger('change')
							}
							else if($.inArray('route', val.types) !== -1)
							{
								route			= val.long_name;
								$('.map-route').val(val.long_name).trigger('change')
							}
							else if($.inArray('administrative_area_level_4', val.types) !== -1)
							{
								area_level_4	= val.long_name;
								$('.map-area-level-4').val(val.long_name).trigger('change')
							}
							else if($.inArray('administrative_area_level_3', val.types) !== -1)
							{
								area_level_3	= val.long_name;
								$('.map-area-level-3').val(val.long_name).trigger('change')
							}
						});
						
						address_detail		= (route ? route : '') + (area_level_4 ? ', ' + area_level_4 : '') + (area_level_3 ? ', ' + area_level_3 : '');
						
						$(apply_address).val(address_detail).trigger('change')
					}
					else
					{
						console.log(response);
					}
				}),
				
				$(apply_address).removeClass('hidden')
				
				lngLat						= $.parseJSON(lngLat),
				lngLat.colorscheme			= _this.closest('.drawing-placeholder').find('.colorscheme').val();
				
				$(apply_to).val(JSON.stringify(lngLat))
			})
		},
		
		polygon: function(shapes, boundTo, indexID, groupID)
		{
			/* Draw polygon from array coordinate */
			if(shapes && typeof shapes.features !== 'undefined')
			{
				if(!indexID)
				{
					var indexID				= 0;
				}
				
				/* serialize and build path */
				$.each(shapes.features, function(key, val)
				{
					if(!val || typeof val !== 'object')
					{
						return;
					}
					
					var path				= [],
						multipath			= [];
					
					if(!val || typeof val.geometry == 'undefined' || typeof val.geometry.coordinates == 'undefined')
					{
						return;
					}
					
					features.push(val),
					
					$.each(val.geometry.coordinates, function(_key, _val)
					{
						if(typeof _val[0][0] !== 'undefined')
						{
							$.each(_val, function(__key, __val)
							{
								path.push
								({
									lng: __val[0],
									lat: __val[1]
								}),
								
								bounds.extend
								({
									lng: __val[0],
									lat: __val[1]
								})
							})
						}
						else
						{
							path.push
							({
								lng: _val[0],
								lat: _val[1]
							}),
							
							bounds.extend
							({
								lng: _val[0],
								lat: _val[1]
							})
						}
					});
					
					/* Show polygon in the map */
					if(loaded_polygons && $.inArray(indexID, loaded_polygons) === -1)
					{
						polygons.push(new google.maps.Polygon
						({
							paths: path,
							strokeColor: (typeof shapes.colorscheme !== 'undefined' ? shapes.colorscheme : '#FF0000'),
							fillColor: (typeof shapes.colorscheme !== 'undefined' ? shapes.colorscheme : '#FF0000'),
							strokeOpacity: 0.8,
							strokeWeight: 2,
							fillOpacity: 0.35,
							editable: (_this.attr('data-apply-coordinate-to') ? true : false),
							draggable: (_this.attr('data-apply-coordinate-to') ? true : false),
							map: map,
							id: indexID,
							group: 'polygon_' + groupID,
							title: (typeof shapes.title !== 'undefined' ? shapes.title : ''),
							description: (typeof shapes.description !== 'undefined' ? shapes.description : '')
						})),
						
						loaded_polygons.push(indexID)
						
						indexID++;
					}
				}),
				
				$.each(polygons, function(key, val)
				{
					/* get event to modify serialized data */
					google.maps.event.addListener(val, 'click', function(e)
					{
						if(!val.title && !val.description)
						{
							return;
						}
						
						popup.setContent('<div class="card border-0"><div class="card-body p-3"><h6 class="card-title mb-0">' + val.title + '</h6>' + val.description + '</div></div>'),
						popup.setPosition(e.latLng),
						popup.open(map),
						openlayers.slideshow('.owl-carousel')
					}),
					
					google.maps.event.addListener(val, 'rightclick', function()
					{
						if(!drawingManager)
						{
							return;
						}
						
						/* remove data from map */
						polygons[val.id].setMap(null),
						
						/* remove data from serialized */
						features.splice(val.id, 1);
						
						var dataLayer		= new google.maps.Data();
						
						dataLayer.add(new google.maps.Data.Feature
						({
							geometry: new google.maps.Data.LineString(val.getPath().getArray())
						})),
						
						/* Push converted JSON into input placeholder */
						dataLayer.toGeoJson(function(obj)
						{
							/* Returning the result of geometry coordinates */
							$(apply_to).val
							(
								JSON.stringify
								({
									colorscheme: val.fillColor,
									features: features,
									measure: google.maps.geometry.spherical.computeArea(val.getPath())
								})
							),
							$(apply_measure).val(google.maps.geometry.spherical.computeArea(val.getPath()))
						})
					}),
					
					val.getPaths().forEach(function(path, index)
					{
						/* point created */
						google.maps.event.addListener(path, 'insert_at', function()
						{
							var dataLayer	= new google.maps.Data();
							
							dataLayer.add(new google.maps.Data.Feature
							({
								geometry: new google.maps.Data.Polygon([path.getArray()])
							})),
							
							/* Push converted JSON into input placeholder */
							dataLayer.toGeoJson(function(obj)
							{
								features[val.id] = obj.features[0];
								
								/* Returning the result of geometry coordinates */
								$(apply_to).val
								(
									JSON.stringify
									({
										colorscheme: val.fillColor,
										features: features,
										measure: google.maps.geometry.spherical.computeArea(path)
									})
								),
								$(apply_measure).val(google.maps.geometry.spherical.computeArea(path))
							})
						}),
						
						/* point removed */
						google.maps.event.addListener(path, 'remove_at', function()
						{
							var dataLayer	= new google.maps.Data();
							
							dataLayer.add(new google.maps.Data.Feature
							({
								geometry: new google.maps.Data.Polygon([path.getArray()])
							})),
							
							/* Push converted JSON into input placeholder */
							dataLayer.toGeoJson(function(obj)
							{
								features[val.id] = obj.features[0];
								
								/* Returning the result of geometry coordinates */
								$(apply_to).val
								(
									JSON.stringify
									({
										colorscheme: val.fillColor,
										features: features,
										measure: google.maps.geometry.spherical.computeArea(path)
									})
								),
								$(apply_measure).val(google.maps.geometry.spherical.computeArea(path))
							})
						}),
						
						/* point moved */
						google.maps.event.addListener(path, 'set_at', function()
						{
							var dataLayer	= new google.maps.Data();
							
							dataLayer.add(new google.maps.Data.Feature
							({
								geometry: new google.maps.Data.Polygon([path.getArray()])
							})),
							
							/* Push converted JSON into input placeholder */
							dataLayer.toGeoJson(function(obj)
							{
								features[val.id] = obj.features[0];
								/* Returning the result of geometry coordinates */
								$(apply_to).val
								(
									JSON.stringify
									({
										colorscheme: val.fillColor,
										features: features,
										measure: google.maps.geometry.spherical.computeArea(path)
									})
								),
								$(apply_measure).val(google.maps.geometry.spherical.computeArea(path))
							})
						})
					}),
					
					/* shape dragged */
					google.maps.event.addListener(val, 'dragend', function(e)
					{
						var dataLayer		= new google.maps.Data();
						
						dataLayer.add(new google.maps.Data.Feature
						({
							geometry: new google.maps.Data.LineString(val.getPath().getArray())
						})),
						
						/* Push converted JSON into input placeholder */
						dataLayer.toGeoJson(function(obj)
						{
							features[val.id] = obj.features[0];
							/* Returning the result of geometry coordinates */
							$(apply_to).val
							(
								JSON.stringify
								({
									colorscheme: val.fillColor,
									features: features,
									measure: google.maps.geometry.spherical.computeArea(val.getPath())
								})
							),
							$(apply_measure).val(google.maps.geometry.spherical.computeArea(val.getPath()))
						})
					})
				}),
				
				/* bound map to fit all shape data in first insert */
				(boundTo && polygons.length > 0 ? map.fitBounds(bounds) : null)
			}
		},
		
		linestring: function(shapes, boundTo, indexID, groupID)
		{
			/* Draw linestring from array coordinate */
			if(shapes && typeof shapes.features !== 'undefined')
			{
				if(!indexID)
				{
					var indexID				= 0;
				}
				
				/* serialize and build path */
				$.each(shapes.features, function(key, val)
				{
					if(!val || typeof val !== 'object')
					{
						return;
					}
					
					var path				= [];
					
					if(!val || typeof val.geometry === 'undefined' || typeof val.geometry.coordinates === 'undefined')
					{
						return;
					}
					
					features.push(val),
					
					$.each(val.geometry.coordinates, function(_key, _val)
					{
						path.push
						({
							lng: _val[0],
							lat: _val[1]
						}),
						
						bounds.extend
						({
							lng: _val[0],
							lat: _val[1]
						})
					});
					
					/* Show linestring in the map */
					if(loaded_linestrings && $.inArray(indexID, loaded_linestrings) === -1)
					{
						linestrings.push(new google.maps.Polyline
						({
							path: path,
							strokeColor: (typeof shapes.colorscheme !== 'undefined' ? shapes.colorscheme : '#FF0000'),
							strokeOpacity: 0.8,
							strokeWeight: 5,
							fillOpacity: 0.35,
							editable: (_this.attr('data-apply-coordinate-to') ? true : false),
							draggable: (_this.attr('data-apply-coordinate-to') ? true : false),
							map: map,
							id: indexID,
							group: 'linestring_' + groupID,
							title: (typeof shapes.title !== 'undefined' ? shapes.title : ''),
							description: (typeof shapes.description !== 'undefined' ? shapes.description : '')
						})),
						
						loaded_linestrings.push(indexID)
						
						indexID++;
					}
				}),
				
				$.each(linestrings, function(key, val)
				{
					google.maps.event.addListener(val, 'click', function(e)
					{
						if(!val.title && !val.description)
						{
							return;
						}
						
						popup.setContent('<div class="card border-0"><div class="card-body p-3"><h6 class="card-title mb-0">' + val.title + '</h6>' + val.description + '</div></div>'),
						popup.setPosition(e.latLng),
						popup.open(map),
						openlayers.slideshow('.owl-carousel')
					}),
					
					google.maps.event.addListener(val, 'rightclick', function()
					{
						if(!drawingManager)
						{
							return;
						}
						
						/* remove data from map */
						linestrings[val.id].setMap(null),
						
						/* remove data from serialized */
						features.splice(val.id, 1);
						
						var dataLayer		= new google.maps.Data();
						
						dataLayer.add(new google.maps.Data.Feature
						({
							geometry: new google.maps.Data.LineString(val.getPath().getArray())
						})),
						
						/* Push converted JSON into input placeholder */
						dataLayer.toGeoJson(function(obj)
						{
							/* Returning the result of geometry coordinates */
							$(apply_to).val
							(
								JSON.stringify
								({
									colorscheme: val.strokeColor,
									features: features,
									measure: google.maps.geometry.spherical.computeLength(val.getPath())
								})
							),
							$(apply_measure).val(google.maps.geometry.spherical.computeLength(val.getPath()))
						})
					}),
					
					/* point created */
					google.maps.event.addListener(val, 'insert_at', function()
					{
						var dataLayer		= new google.maps.Data();
						
						dataLayer.add(new google.maps.Data.Feature
						({
							geometry: new google.maps.Data.LineString(val.getPath().getArray())
						})),
						
						/* Push converted JSON into input placeholder */
						dataLayer.toGeoJson(function(obj)
						{
							features[val.id] = obj.features[0];
							
							/* Returning the result of geometry coordinates */
							$(apply_to).val
							(
								JSON.stringify
								({
									colorscheme: val.strokeColor,
									features: features,
									measure: google.maps.geometry.spherical.computeLength(val.getPath())
								})
							),
							$(apply_measure).val(google.maps.geometry.spherical.computeLength(val.getPath()))
						})
					}),
					
					/* point removed */
					google.maps.event.addListener(val.getPath(), 'remove_at', function()
					{
						var dataLayer		= new google.maps.Data();
						
						dataLayer.add(new google.maps.Data.Feature
						({
							geometry: new google.maps.Data.LineString(val.getPath().getArray())
						})),
						
						/* Push converted JSON into input placeholder */
						dataLayer.toGeoJson(function(obj)
						{
							features[val.id] = obj.features[0];
							
							/* Returning the result of geometry coordinates */
							$(apply_to).val
							(
								JSON.stringify
								({
									colorscheme: val.strokeColor,
									features: features,
									measure: google.maps.geometry.spherical.computeLength(val.getPath())
								})
							),
							$(apply_measure).val(google.maps.geometry.spherical.computeLength(val.getPath()))
						})
					}),
					
					/* point moved */
					google.maps.event.addListener(val.getPath(), 'set_at', function()
					{
						var dataLayer		= new google.maps.Data();
						
						dataLayer.add(new google.maps.Data.Feature
						({
							geometry: new google.maps.Data.LineString(val.getPath().getArray())
						})),
						
						/* Push converted JSON into input placeholder */
						dataLayer.toGeoJson(function(obj)
						{
							features[val.id] = obj.features[0];
							
							/* Returning the result of geometry coordinates */
							$(apply_to).val
							(
								JSON.stringify
								({
									colorscheme: val.strokeColor,
									features: features,
									measure: google.maps.geometry.spherical.computeLength(val.getPath())
								})
							),
							$(apply_measure).val(google.maps.geometry.spherical.computeLength(val.getPath()))
						})
					}),
					
					/* shape dragged */
					google.maps.event.addListener(val, 'dragend', function()
					{
						var dataLayer		= new google.maps.Data();
						
						dataLayer.add(new google.maps.Data.Feature
						({
							geometry: new google.maps.Data.LineString(val.getPath().getArray())
						})),
						
						/* Push converted JSON into input placeholder */
						dataLayer.toGeoJson(function(obj)
						{
							features[val.id] = obj.features[0];
							
							/* Returning the result of geometry coordinates */
							$(apply_to).val
							(
								JSON.stringify
								({
									colorscheme: val.strokeColor,
									features: features,
									measure: google.maps.geometry.spherical.computeLength(val.getPath())
								})
							),
							$(apply_measure).val(google.maps.geometry.spherical.computeLength(val.getPath()))
						})
					})
				}),
				
				/* bound map to fit all shape data in first insert */
				(boundTo && linestrings.length > 0 ? map.fitBounds(bounds) : null)
			}
		},
		
		geocoder: function()
		{
			if($('#place-search').length)
			{
				var input					= document.getElementById('place-search'),
					search_box				= new google.maps.places.SearchBox
				(
					input,
					{
						bounds: map.getBounds()
					}
				);
				
				map.controls[google.maps.ControlPosition.TOP_LEFT].push(input),
				map.addListener('bounds_changed', function()
				{
					search_box.setBounds(map.getBounds())
				}),
				search_box.addListener('places_changed', function()
				{
					var places				= search_box.getPlaces(),
						lngLat				= {},
						area_level_3		= '',
						area_level_4		= '',
						route				= '',
						street_number		= '',
						address_detail		= '';
						
					if(places.length == 0)
					{
						return
					}
					
					$.each(places, function(key, val)
					{
						lngLat				= val.geometry.location;
						
						if(val.geometry.viewport)
						{
							bounds.union(val.geometry.viewport)
						}
						else
						{
							bounds.extend(lngLat)
						}
						
						$.each(val.address_components, function(_key, _val)
						{
							if($.inArray('street_number', _val.types) !== -1)
							{
								street_number			= 'No. ' + _val.long_name;
								$('.map-street-number').val(_val.long_name).trigger('change')
							}
							else if($.inArray('route', _val.types) !== -1)
							{
								route			= _val.long_name;
								$('.map-route').val(_val.long_name).trigger('change')
							}
							else if($.inArray('administrative_area_level_4', _val.types) !== -1)
							{
								area_level_4		= _val.long_name;
								$('.map-area-level-4').val(_val.long_name).trigger('change')
							}
							else if($.inArray('administrative_area_level_3', _val.types) !== -1)
							{
								area_level_3		= _val.long_name;
								$('.map-area-level-3').val(_val.long_name).trigger('change')
							}
						});
						
						address_detail		= (route ? route + ', ' : '') + (area_level_4 ? area_level_4 + ', ' : '') + (area_level_3 ? area_level_3 : '');
						
						$(apply_address).val(address_detail).trigger('change');
						
						if(!_this.attr('data-drawing-manager'))
						{
							draggable_marker.setPosition(lngLat)
						}
					}),
					
					map.fitBounds(bounds);
				
					lngLat					= $.parseJSON(lngLat),
					lngLat.colorscheme		= _this.closest('.drawing-placeholder').find('.colorscheme').val();
					
					$(apply_to).val(JSON.stringify(lngLat))
				})
			}
		},
		
		geolocation: function()
		{
			if(navigator.geolocation)
			{
				navigator.geolocation.getCurrentPosition(function(position)
				{
					var lngLat				=
					{
						lat: position.coords.latitude,
						lng: position.coords.longitude
					};
					
					if(!_this.attr('data-drawing-manager'))
					{
						draggable_marker.setPosition(lngLat),
						draggable_marker.setTitle('You are here'),
						draggable_marker.setAnimation(google.maps.Animation.BOUNCE);
						
						if($(apply_to).length)
						{
							lngLat.colorscheme	= _this.closest('.drawing-placeholder').find('.colorscheme').val();
							
							$(apply_to).val
							(
								JSON.stringify(lngLat)
							)
						}
					}
					
					map.setCenter(lngLat)
				})
			}
			else
			{
				alert("Your device doesn't support geolocation")
			}
		},
		
		pulsate: function()
		{
		},
		
		slideshow: function(_class)
		{
			require.css([config.asset_url + 'owlcarousel/assets/owl.carousel.min.css', config.asset_url + 'owlcarousel/assets/owl.theme.default.min.css']),
			require.js([config.asset_url + 'owlcarousel/owl.carousel.min.js'], function()
			{
				$(_class).each(function()
				{
					var _this				= $(this);
					$(this).owlCarousel
					({
						navText: ['<i class="mdi mdi-chevron-left"></i>', '<i class="mdi mdi-chevron-right"></i>'],
						nav: (_this.attr('data-nav') ? true : false),
						dots: false,
						responsive:
						{
							0:
							{
								items: (_this.attr('data-items') ? _this.attr('data-items') : 1)
							},
							640:
							{
								items: (_this.attr('data-sm-items') ? _this.attr('data-sm-items') : 2)
							},
							1024:
							{
								items: (_this.attr('data-md-items') ? _this.attr('data-md-items') : 3)
							},
							1280:
							{
								items: (_this.attr('data-lg-items') ? _this.attr('data-lg-items') : 4),
								mergeFit:true
							}
						}
					})
				})
			})
		}
	}
})();